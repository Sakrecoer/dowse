#!/usr/bin/env zsh

source $R/env

vars+=(dnscrypt_ipaddr dnscrypt_name dnscrypt_key)

rconf=""

[[ -r $H/run/leases ]] && {
	# load dhcp leases in redis
	for i in ${(f)"$(cat /run/dowse/isc.leases)"}; do
		rconf+="SET dns-lease-${i[(w)4]} ${i[(w)3]}\n"
		rconf+="SET dns-lease-${i[(w)4]}.dowse.it ${i[(w)3]}\n"

		# and the hosts reverses
		rconf+="SET dns-reverse-${i[(w)3]}. ${i[(w)4]}\n"

	done
}

[[ -r /etc/dowse/network ]] && {
	for i in ${(f)"$(cat /etc/dowse/network)"}; do

		print "$i" | grep '^#' > /dev/null
		[[ $? = 0 ]] && continue

		# first word may be a mac address
		print "${i[(w)1]}" | grep '^..:..:..:..:..:..' > /dev/null
		if [[ $? = 0 ]]; then
			mac="${i[(w)1]}"
			hostname="${i[(w)2]}"
			ip4="${i[(w)3]}"
		else
			mac=""
			hostname="${i[(w)1]}"
			ip4="${i[(w)2]}"
		fi
		rconf+="SET dns-lease-${hostname} ${ip4}\n"
		rconf+="SET dns-lease-${hostname}.dowse.it ${ip4}\n"
		func "+/etc/network: $mac $hostname $ip4"
	done
}

# load the local hosts known
rconf+="SET dns-lease-${hostname}          ${address}\n"
rconf+="SET dns-lease-${hostname}.dowse.it ${address}\n"
rconf+="SET dns-lease-www.dowse.it         ${address}\n"
rconf+="SET dns-lease-dowse.it             ${address}\n"
rconf+="SET dns-lease-gateway    ${wan}\n"
# load the local hosts reverses
rconf+="SET dns-reverse-${address}. ${hostname}.dowse.it\n"
[[ "$address" = "$gateway" ]] ||
	rconf+="SET dns-reverse-${wan}. gateway\n"

# Wait until redis-volatile is ready
until [[ `echo ping | redis dynamic 2>/dev/null` == "PONG" ]] {
	sleep 1
}

print $rconf | redis dynamic

#
# The startup of dnscrypt server is no more required, because it's responsibilty of the "pendulum > check_and_select_dns" function
# that :
#  1) search a new proxy if the oldest is undefined or no more reachable
#  2) when a new endpoint is found it's  stop + start the DNS server.
#

# grab the last used server
#dns_selected=$(print "GET dns-server-selected" | redis dynamic)
#dns_selected=${dns_selected/\(nil\)/}

# if undefined, eg at the first startup, it takes a default value
#dnscrypt_name=${dns_selected:-dnscrypt.eu-nl}
dnscrypt_name=${1:-"adguard-dns-ns1"}

func "Launching dnscrypt-proxy to listen on port 53"
act "dnscrypt proxy server: $dnscrypt_name"

# TODO: why this ?! and why here?? this is a global setting for
# something very delicate that is overwritten on every
# dnscrypt-proxy execution. likely to cause problems. old comment:
# "definire la variabile d'ambiente interface"
# ulimit -c unlimited

# why a new log on each run? this is likely to use up all i/o
# TMP=`date +%Y%m%d_%H%M%S`

bin=$R/src/dnscrypt-proxy/src/proxy/dnscrypt-proxy

if [[ $DEBUG = 1 ]]; then
	DOWSE_DOMAINLIST=$R/src/domain-list/data \
			DOWSE_LAN_ADDRESS_IP4=$address \
			DOWSE_LAN_NETMASK_IP4=$netmask \
			interface=$bridge \
			hostname=$hostname \
			domain=$lan \
			exec $bin -a $address:53 \
			-l /var/log/log/dnscrypt.log \
			-L $R/src/dnscrypt-proxy/dnscrypt-resolvers.csv \
			-R "$dnscrypt_name" \
			-I \
			-X $R/src/dnscrypt-plugin/dnscrypt_dowse.so${args},debug \
			-m 7 -u dowse
else
	pid=/run/dowse/conf/dnscrypt-proxy.pid
	DOWSE_DOMAINLIST=$R/src/domain-list/data \
			DOWSE_LAN_ADDRESS_IP4=$address \
			DOWSE_LAN_NETMASK_IP4=$netmask \
			hostname=$hostname \
			domain=$lan \
			interface=$bridge \
			exec $bin -a $address:53 \
			-l /var/log/dowse/dnscrypt.log \
			-L $R/src/dnscrypt-proxy/dnscrypt-resolvers.csv \
			-R "$dnscrypt_name" \
			-X $R/src/dnscrypt-plugin/dnscrypt_dowse.so${args} \
			-m 7 -u dowse
fi

